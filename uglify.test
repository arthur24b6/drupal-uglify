<?php

/**
 * Tests the functionality of the Simpletest example content type.
 */
class UglifyTest extends DrupalWebTestCase {

  public static function getInfo() {
    return array(
      'name' => 'Uglify Test',
      'description' => 'Uglification is working properly.',
      'group' => 'Uglify',
    );
  }

  /**
   * Force the use of the current database and environment.
   */
  function setUp() {
    parent::setUp(array('uglify', 'file'));
    //$this->setup = TRUE;
    $this->testJSFile = drupal_get_path('module', 'uglify') . '/uglify-test.js';
  }

  //function tearDown() {}

  function testUglify() {
    $ugly = new uglify();

    $message = "Scans file system";
    $ugly->buildFileList();
    $this->assertTrue($ugly->files, $message);

    $message = "Test JS file is in registry";
    $this->assertTrue(!empty($ugly->files[$this->testJSFile]), $message);

    $message = "Excludes all files in the public files directory";
    $path = drupal_realpath('public://');
    $test = TRUE;
    foreach ($ugly->files as $src => $item) {
      if (strstr($src, $path)) {
        $test = FALSE;
      }
    }
    $this->assertTrue($test, $message);

    $message = "Excludes specified file";
    $ugly->excludeFile($this->testJSFile);
    $ugly->buildFileList();
    $this->assertTrue(empty($ugly->files[$this->testJSFile]), $message);

    $message = "File can be unexcluded";
    $ugly->unExcludeFile($this->testJSFile);
    $this->assertTrue(empty($ugly->excluded[$this->testJSFile]), $message);

    $message = "Registers single file";
    $ugly->registerFile($this->testJSFile);
    $this->assertTrue(!empty($ugly->files[$this->testJSFile]), $message);

    $message = "Minfies one file";
    $src = drupal_get_path('module', 'uglify') . '/uglify-test.js';
    $ugly->minifyFile($this->testJSFile);
    $path = $ugly->minfiedFileURI($this->testJSFile);
    $this->assertTrue(file_exists($path), $message);

    $message = "Purges one file.";
    $ugly->purgeFile($this->testJSFile);
    $this->assertTrue(empty($ugly->files[$this->testJSFile]), $message);

    $message = "Purged file is deleted";
    $path = $ugly->minfiedFileURI($this->testJSFile);
    $this->assertTrue(!file_exists($path), $message);

    $message = "Registers a directory of files";
    $ugly->buildFileList(drupal_get_path('module', 'uglify'));
    $this->assertTrue(!empty($ugly->files[$this->testJSFile]), $message);

    $message = "Minfies registered files";
    $ugly->minifyFiles();
    $path = $ugly->minfiedFileURI($this->testJSFile);
    $this->assertTrue(file_exists($path), $message);

    $message = "Purge file: ";
    $files = $ugly->files;
    $ugly->purgeFiles();
    $test = TRUE;
    foreach ($files as $item) {
      if (file_exists($item['minified'])) {
        $test = FALSE;
      }
      $this->assertTrue(!file_exists($item['minified']), $message . $item['minified']);
    }

    $message = "Purges all files";
    $this->assertTrue($test, $message);

    $message = "Datestamp on a file prevents minification";
    $ugly->registerFile($this->testJSFile);
    $ugly->minifyFiles();

    $ugly->purgeFiles();

  }

}

